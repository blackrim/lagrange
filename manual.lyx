#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{fullpage}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Lagrange Manual
\end_layout

\begin_layout Author
Stephen A.
 Smith
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
Impetis
\end_layout

\begin_layout Standard
Lagrange began as a Python library or program (however you want to look
 at it) with Richard Ree.
 I was coding along side this project a Java implementation (called AReA),
 but we later joined forces and produced the paper with the explicitly solved
 rate matrix, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$Q$
\end_layout

\end_inset

 (Ree and Smith, 2008).
 This package has been successfully used for a variety of projects including
 some of our own.
 However, development has continued.
 Rick developed a nice web interface for the construction of input files.
 This is especially helpful when describing more complex area connectivity
 scenarios.
 Nevertheless, some users, including the developers, have recognized the
 speed limitations, and therefore dataset limitations, of the Python version.
 In order to continue the development of more computationally intensive
 procedures, we have moved to a C++ version.
 There are/will be ways to use the Python files created from the website,
 but you may also interact directly with the C++ program.
\end_layout

\begin_layout Section
What is here
\end_layout

\begin_layout Standard
In this document you will find descriptions of the 1) compilation and installati
on process, 2) configuration file construction, 3) some examples and 4)
 some of the algorithmic advances.
 
\end_layout

\begin_layout Chapter
Compilation and Installation
\end_layout

\begin_layout Standard
The C++ version of Lagrange makes use of quite a few libraries to simplify
 the code and limit the introduction of errors.
 The hardest part of compilation will be getting those installed and the
 difficulty will vary depending on the machine.
 In some cases (Windows and certain versions of Mac and Linux), we do not
 have access to machines in which to test compilation so you will be on
 your own.
 But please email with problems if they arise and we will try our best to
 resolve those.
\end_layout

\begin_layout Standard
A more extensive discussion of the Makefile options is also below.
\end_layout

\begin_layout Standard
The libraries used in Lagrange++ include:
\end_layout

\begin_layout Itemize
GNu Scientific Library (GSL) -- optimization
\end_layout

\begin_layout Itemize
armadillo -- linear algebra
\end_layout

\begin_layout Itemize
octave -- linear algebra
\end_layout

\begin_layout Itemize
gmp -- optional, for calulating exceptionally large trees
\end_layout

\begin_layout Itemize
mpfr -- optional, for calculating exceptionally large trees
\end_layout

\begin_layout Itemize
gmpfrxx -- optional, for calculating exceptionally large trees
\end_layout

\begin_layout Standard
You will also have to be able to compile with a fortran compiler (I have
 been using gfortran).
 
\end_layout

\begin_layout Section
Linux
\end_layout

\begin_layout Standard
Compilation of Lagrange on a Linux machine will be the least painful.
 This is mostly because both Rick and I develop on Linux machines and so
 this is the operating system on which the most testing has occurred.
 In particular it has been tested on both Ubuntu and Fedora distributions.
 Because of the package management system on these machines, the vast majority
 of the relevant packages can be installed from the package managers.
 After downloading the packages, the current procedure for installation
 on Ubuntu 10.04 is:
\end_layout

\begin_layout Enumerate
make sure that you have the basic compilation tools (
\family typewriter
sudo apt-get install build-essential
\family default
)
\end_layout

\begin_layout Enumerate
untar and install armadillo (contained in the downloaded package)
\end_layout

\begin_deeper
\begin_layout Enumerate
this may require the installation of other packages (for example, cmake,
 which can be installed with the command 
\family typewriter
sudo apt-get install cmake
\family default
)
\end_layout

\begin_layout Enumerate
to get all the packages necessary you can run 
\family typewriter
sudo apt-get build-dep armadillo
\end_layout

\end_deeper
\begin_layout Enumerate
install the gsl development libraries with the command 
\family typewriter
sudo apt-get install libgsl0-dev
\end_layout

\begin_layout Enumerate
install the python development libraries so you can read in the web configuratio
n files with 
\family typewriter
sudo apt-get install python2.6-dev
\end_layout

\begin_layout Enumerate
if you are going to use the big tree option for compilation (good for trees
 over 1000 tips) you should do the following:
\end_layout

\begin_deeper
\begin_layout Enumerate
in the gmpfrxx directory, untar the gmp-4.3.1.tar.bz2 file and go inside and
 install with 
\family typewriter
sudo apt-get install m4
\family default
,
\family typewriter
 ./configure --enable-cxx
\family default
, 
\family typewriter
make
\family default
, 
\family typewriter
sudo make install
\family default
)
\end_layout

\begin_layout Enumerate
untar the mpfr-2.4.2.tar.gz and do the standard 
\family typewriter
./configure
\family default
,
\family typewriter
 make
\family default
,
\family typewriter
 sudo make install
\family default
)
\end_layout

\begin_layout Enumerate
finally go back into the gmpfrxx and just type 
\family typewriter
make
\end_layout

\end_deeper
\begin_layout Enumerate
make lagrange with the command 
\family typewriter
make -f Makefile_copper.linux
\end_layout

\begin_layout Section
MacOSX
\end_layout

\begin_layout Standard
When available, a binary version of Lagrange is made available for Mac users
 to bypass the need to compile it from source.
 
\end_layout

\begin_layout Section
Windows
\end_layout

\begin_layout Standard
Currently being test on a Windows 7 machines, but check out the instructions
 for Linux and Mac and use CygWin.
\end_layout

\begin_layout Section
Makefile description
\end_layout

\begin_layout Chapter
Configuration file
\end_layout

\begin_layout Standard
In order for Lagrange++ to run it must be informed of your tree and data
 and parameters.
 This is done in a plain text file the options for which are described below.
 
\end_layout

\begin_layout Section
Native Lagrange++ configuration file
\end_layout

\begin_layout Standard
The configuration file is meant to have an extremely simple format where
 there is a 
\family typewriter
parameter = option
\family default
 format.
 
\end_layout

\begin_layout Standard
So an example configuration file might look like:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
treefile = aesculus.tre
\end_layout

\begin_layout Plain Layout

\family typewriter
datafile = aesculus.data
\end_layout

\begin_layout Plain Layout

\family typewriter
areanames = EA ENA WNA EU
\end_layout

\begin_layout Plain Layout

\family typewriter
ancstate = _all_
\end_layout

\begin_layout Plain Layout

\family typewriter
states
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

In this example, Lagrange++ will look for a treefile named aesculus.tre in
 the current directory and a datafile named aesculus.data in the current
 directory.
 It will them assume that the area names corresponding to the data in the
 aesculus.data file are called EA ENA WNA and EU respectfully.
 It will then assume that you want ancestral range caluclations for all
 the nodes and it will report the states at the nodes (as opposed to splits
 which will report the splits at the nodes).
 This is a simple file that might serve many of the needs of people using
 Lagrange.
 
\end_layout

\begin_layout Standard
The treefile is assumed to contain newick tree(s) alone.
 If more than one tree is in the file then it will assume that you want
 to reconstruct across all those trees and will do so.
 There is no other option for conducting the analyses on multiple trees.
 In the case of Bayesian reconstructions, it will sample from those trees
 for reconstruction ancestral ranges or for stochastic mapping.
 An example treefile might look like:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
((a:0.1,b:0.1):0.2,c:0.3);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

Or in the case of many trees:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
((a:0.1,b:0.1):0.2,c:0.3);
\end_layout

\begin_layout Plain Layout

\family typewriter
((a:0.1,b:0.1):0.15,c:0.25);
\end_layout

\begin_layout Plain Layout

\family typewriter
((a:0.1,c:0.1):0.15,b:0.25);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

As a note, there should be no translation tables and of course the names
 have to correspond to the datafile.
\end_layout

\begin_layout Standard
The datafile is also meant to be simple.
 It is simply an extended Phylip format.
 An example would be:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
3 4
\end_layout

\begin_layout Plain Layout

\family typewriter
a 1100
\end_layout

\begin_layout Plain Layout

\family typewriter
b 0110
\end_layout

\begin_layout Plain Layout

\family typewriter
c 0011
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

The areanames are defined in the configuration file so there is no need
 to place them here.
 In the example above we might define in the configuration file that 
\family typewriter
areanames = EA ENA WNA EU
\family default
.
 
\end_layout

\begin_layout Standard
With the two important bits being described (treefile and datafile), we
 can now move on to other configuration options in the configuration file.
 The two that need descriptions are the area connectivity options and period
 disgnation options.
 In the configuration file, these two may look like:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
ratematrix = aesculus.rm
\end_layout

\begin_layout Plain Layout

\family typewriter
periods = 10 100
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

The first option is pointing to a file called aesculus.rm which contains
 the rate matrix connectivity parameterization.
 If no file is designated, then all connectivities will be considered or
 unconstrained.
 If a connectivity scenario is desired, then the file might look like:
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "75col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
1 1 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 0.1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 0.1 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 0.2 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 1 1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{5 mm}
\end_layout

\end_inset

 This says that for the first period (from 0 to 10) there is less dispersal
 between areas 2 and 3 and in the second period there is only less dispersal
 from 2 to 3.
 
\end_layout

\begin_layout Standard
The second option (
\family typewriter
periods = 10 100
\family default
) designates what time slices or periods will be considered.
 This is important when designating the above matrix if different connectivities
 are used for different times, and it can also be important when estimating
 the rate matrix parameters if you want different estimates for different
 time periods.
\end_layout

\begin_layout Standard
Other options are fairly simple and are described below.
\end_layout

\begin_layout Itemize

\family typewriter
mrca = name species1 species2
\family default
 -- this is used when wanting ancestral state results for only particular
 nodes, these nodes need to be specified.
 This is not necessarily very useful now because the forward-reverse algorithm
 implemented now does not require much extra time to report results for
 all nodes.
 I might just leave it alone and work on parse the results for the nodes
 of interest instead of defining here.
\end_layout

\begin_layout Itemize

\family typewriter
fixnode = mrcaname distribution 
\family default
--
\family typewriter
 
\family default
example:
\family typewriter
 fixnode = ROOT 1000
\family default
 -- this is used, with a mrca definition as above in order to fix the ancestral
 distribution of a node.
\end_layout

\begin_layout Itemize

\family typewriter
excludedists = distributions 
\family default
--
\family typewriter
 
\family default
example:
\family typewriter
 excludedists = 1111
\family default
 -- this is used to exclude a set of distributions from the model.
 More than one model may be seperated by commas.
\end_layout

\begin_layout Itemize

\family typewriter
includedists = distributions 
\family default
--
\family typewriter
 
\family default
example:
\family typewriter
 includedists = 1000,0100,0010,0001,1100,1010,1001,0110,0101,0011
\family default
 -- this is used as the opposite of above, where you only want to include
 a certain list of distributions from the model.
\end_layout

\begin_layout Itemize

\family typewriter
includedists = number 
\family default
-- example: 
\family typewriter
includedists = 2
\family default
 -- when the above option is followed by a number, it will only include
 distributions that include that number of areas or less.
\end_layout

\begin_layout Itemize

\family typewriter
ancstates = nodes 
\family default
-- example: 
\family typewriter
ancstates = ROOT
\family default
 -- this designates that you want ancestral states to be calculated for
 a node.
 To do this for all nodes, simply use 
\family typewriter
ancstates = _all_.
\end_layout

\begin_layout Itemize

\family typewriter
states|splits 
\family default
-- example: 
\family typewriter
states
\family default
 -- this designates what you want reported for ancestral calculations, either
 states or splits.
 Splits will give the particular speciation split with the highest likelihood,
 while states will give the most likely range or state.
\end_layout

\begin_layout Itemize

\family typewriter
estimate_dispersal_mask
\family default
 -- this designates that you want the entire dispersal mask to be estimated
 (every dispersal rate).
 
\end_layout

\begin_layout Section
Python Lagrange configuration
\end_layout

\begin_layout Standard
In order to utilize this, you must go to the website here.
\end_layout

\end_body
\end_document
